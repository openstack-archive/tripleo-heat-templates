heat_template_version: wallaby

description: >
  OpenStack containerized Aodh Listener service

parameters:
  ContainerAodhListenerImage:
    description: image
    type: string
  ContainerAodhConfigImage:
    description: The container image to use for the aodh config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry. Use
                 parameter_merge_strategies to merge it with the defaults.
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  MonitoringSubscriptionAodhListener:
    default: 'overcloud-ceilometer-aodh-listener'
    type: string

resources:

  ContainersCommon:
    type: ../containers-common.yaml

  MySQLClient:
    type: ../database/mysql-client.yaml

  AodhBase:
    type: ./aodh-base.yaml
    properties:
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      EndpointMap: {get_param: EndpointMap}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Aodh API role.
    value:
      service_name: aodh_listener
      monitoring_subscription: {get_param: MonitoringSubscriptionAodhListener}
      config_settings:
        get_attr: [AodhBase, role_data, config_settings]
      service_config_settings:
        get_attr: [AodhBase, role_data, service_config_settings]
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: aodh
        puppet_tags: aodh_config
        step_config:
            list_join:
              - "\n"
              - - "include tripleo::profile::base::aodh::listener"
                - {get_attr: [MySQLClient, role_data, step_config]}
        config_image: {get_param: ContainerAodhConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/aodh_listener.json:
          command: /usr/bin/aodh-listener
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/aodh
              owner: aodh:aodh
              recurse: true
      docker_config:
        step_4:
          aodh_listener:
            image: {get_param: ContainerAodhListenerImage}
            net: host
            privileged: false
            restart: always
            healthcheck: {get_attr: [ContainersCommon, healthcheck_rpc_port]}
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                - - /var/lib/kolla/config_files/aodh_listener.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/aodh:/var/lib/kolla/config_files/src:ro
                  - /var/log/containers/aodh:/var/log/aodh:z
            environment:
              KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item.path }}"
            state: directory
            setype: "{{ item.setype }}"
            mode: "{{ item.mode }}"
          with_items:
            - { 'path': /var/log/containers/aodh, 'setype': container_file_t, 'mode': '0750' }
      external_upgrade_tasks:
        - when:
            - step|int == 1
          tags:
            - never
            - system_upgrade_transfer_data
            - system_upgrade_stop_services
          block:
            - name: Stop aodh listener container
              import_role:
                name: tripleo_container_stop
              vars:
                tripleo_containers_to_stop:
                  - aodh_listener
                tripleo_delegate_to: "{{ groups['aodh_listener'] | default([]) }}"
