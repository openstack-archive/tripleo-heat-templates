heat_template_version: wallaby

description: >
  OpenStack Nova database client service.

parameters:
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  NovaPassword:
    description: The password for the nova service and db account
    type: string
    hidden: true
  EnableSQLAlchemyCollectd:
    type: boolean
    description: >
        Set to true to enable the SQLAlchemy-collectd server plugin
    default: false

outputs:
  role_data:
    description: Role data for the Nova base service.
    value:
      config_settings:
        nova::api_database_connection:
          make_url:
            scheme: {get_param: [EndpointMap, MysqlInternal, protocol]}
            username: nova_api
            password: {get_param: NovaPassword}
            host: {get_param: [EndpointMap, MysqlInternal, host]}
            path: /nova_api
            query:
              if:
                - {get_param: EnableSQLAlchemyCollectd}
                - read_default_file: /etc/my.cnf.d/tripleo.cnf
                  read_default_group: tripleo
                  plugin: collectd
                  collectd_program_name: nova_api
                  collectd_host: localhost
                - read_default_file: /etc/my.cnf.d/tripleo.cnf
                  read_default_group: tripleo
      service_config_settings:
        mysql:
          nova::db::mysql_api::password: {get_param: NovaPassword}
          nova::db::mysql_api::user: nova_api
          nova::db::mysql_api::host: {get_param: [EndpointMap, MysqlInternal, host_nobrackets]}
          nova::db::mysql_api::dbname: nova_api
          nova::db::mysql_api::allowed_hosts:
            - '%'
            - "%{hiera('mysql_bind_host')}"
