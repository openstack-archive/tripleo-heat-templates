heat_template_version: rocky

description: >
  OpenStack containerized Nova API service

parameters:
  ContainerNovaApiImageStein:
    description: image
    type: string
    default: ''
  ContainerNovaApiImage:
    description: image
    type: string
  ContainerNovaConfigImage:
    description: The container image to use for the nova config_volume
    type: string
  NovaApiLoggingSource:
    type: json
    default:
      tag: openstack.nova.api
      file: /var/log/containers/nova/nova-api.log
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  DeployIdentifier:
    default: ''
    type: string
    description: >
      Setting this to a unique value will re-run any deployment tasks which
      perform configuration on a Heat stack-update.
  EnableInternalTLS:
    type: boolean
    default: false
  NovaDbSyncTimeout:
    default: 300
    description: Timeout for Nova db sync
    type: number
  NovaPassword:
    description: The password for the nova service and db account
    type: string
    hidden: true
  MysqlIPv6:
    default: false
    description: Enable IPv6 in MySQL
    type: boolean
  NovaWorkers:
    default: 0
    description: Number of workers for Nova services.
    type: number
  KeystoneRegion:
    type: string
    default: 'regionOne'
    description: Keystone region for endpoint
  NeutronMetadataProxySharedSecret:
    description: Shared secret to prevent spoofing
    type: string
    hidden: true
  InstanceNameTemplate:
    default: 'instance-%08x'
    description: Template string to be used to generate instance names
    type: string
  NovaEnableDBPurge:
    default: true
    description: |
        Whether to create cron job for purging soft deleted rows in Nova database.
    type: boolean
  NovaEnableDBArchive:
    default: true
    description: |
        Whether to create cron job for archiving soft deleted rows in Nova database.
    type: boolean
  MonitoringSubscriptionNovaApi:
    default: 'overcloud-nova-api'
    type: string
  NovaDefaultFloatingPool:
    default: 'public'
    description: Default pool for floating IP addresses
    type: string
  NovaApiPolicies:
    description: |
      A hash of policies to configure for Nova API.
      e.g. { nova-context_is_admin: { key: context_is_admin, value: 'role:admin' } }
    default: {}
    type: json
  NovaAllowResizeToSameHost:
    default: false
    description: Allow destination machine to match source for resize.
    type: boolean
  NovaApiMaxLimit:
    default: 1000
    description: Max number of objects returned per API query
    type: number
  MemcacheUseAdvancedPool:
    type: boolean
    description: |
      Use the advanced (eventlet safe) memcached client pool.
    default: true

conditions:

  fast_forward_upgrade: {not: {equals: [{get_param: ContainerNovaApiImageStein},'']}}
  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}

  mysql_ipv6_use_ip_address:
    and:
    - {equals: [{get_param: MysqlIPv6}, true]}
    - {equals: [{get_param: EnableInternalTLS}, false]}

  nova_workers_zero: {equals : [{get_param: NovaWorkers}, 0]}
  is_neutron_shared_metadata_notempty: {not: {equals: [{get_param: NeutronMetadataProxySharedSecret}, '']}}


resources:

  ContainersCommon:
    type: ../containers-common.yaml

  MySQLClient:
    type: ../../deployment/database/mysql-client.yaml

  NovaApiLogging:
    type: OS::TripleO::Services::Logging::NovaApi

  ApacheServiceBase:
    type: ../../deployment/apache/apache-baremetal-puppet.yaml
    properties:
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      EndpointMap: {get_param: EndpointMap}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}
      EnableInternalTLS: {get_param: EnableInternalTLS}

  NovaBase:
    type: ./nova-base-puppet.yaml
    properties:
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      EndpointMap: {get_param: EndpointMap}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

  NovaApiDBClient:
    type: ./nova-apidb-client-puppet.yaml
    properties:
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      EndpointMap: {get_param: EndpointMap}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

  NovaDBClient:
    type: ./nova-db-client-puppet.yaml
    properties:
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      EndpointMap: {get_param: EndpointMap}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}


outputs:
  role_data:
    description: Role data for the Nova API role.
    value:
      service_name: nova_api
      keystone_resources:
        nova:
          endpoints:
            public: {get_param: [EndpointMap, NovaPublic, uri]}
            internal: {get_param: [EndpointMap, NovaInternal, uri]}
            admin: {get_param: [EndpointMap, NovaAdmin, uri]}
          users:
            nova:
              roles:
                - admin
                - service
              password: {get_param: NovaPassword}
          region: {get_param: KeystoneRegion}
          service: 'compute'
      monitoring_subscription: {get_param: MonitoringSubscriptionNovaApi}
      config_settings:
        map_merge:
          - get_attr: [NovaBase, role_data, config_settings]
          - get_attr: [NovaApiDBClient, role_data, config_settings]
          - get_attr: [NovaDBClient, role_data, config_settings]
          - get_attr: [NovaApiLogging, config_settings]
          - apache::default_vhost: false
            tripleo::nova_api::firewall_rules:
              '113 nova_api':
                dport:
                  - 8774
                  - 13774
            nova::keystone::authtoken::project_name: 'service'
            nova::keystone::authtoken::user_domain_name: 'Default'
            nova::keystone::authtoken::project_domain_name: 'Default'
            nova::keystone::authtoken::password: {get_param: NovaPassword}
            nova::keystone::authtoken::www_authenticate_uri: {get_param: [EndpointMap, KeystonePublic, uri_no_suffix] }
            nova::keystone::authtoken::auth_url: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}
            nova::keystone::authtoken::region_name: {get_param: KeystoneRegion}
            nova::keystone::authtoken::memcache_use_advanced_pool: {get_param: MemcacheUseAdvancedPool}
            nova::api::max_limit: {get_param: NovaApiMaxLimit}
            nova::api::enabled: true
            nova::api::default_floating_pool: {get_param: NovaDefaultFloatingPool}
            nova::api::sync_db_api: true
            nova::api::enable_proxy_headers_parsing: true
            nova::api::api_bind_address:
              str_replace:
                template:
                  "%{hiera('fqdn_$NETWORK')}"
                params:
                  $NETWORK: {get_param: [ServiceNetMap, NovaApiNetwork]}
            nova_wsgi_enabled: true
            nova::api::service_name: 'httpd'
            nova::wsgi::apache_api::ssl: {get_param: EnableInternalTLS}
            # NOTE: bind IP is found in hiera replacing the network name with the local node IP
            # for the given network; replacement examples (eg. for internal_api):
            # internal_api -> IP
            # internal_api_uri -> [IP]
            # internal_api_subnet - > IP/CIDR
            nova::wsgi::apache_api::bind_host:
              str_replace:
                template:
                  "%{hiera('$NETWORK')}"
                params:
                  $NETWORK: {get_param: [ServiceNetMap, NovaApiNetwork]}
            nova::wsgi::apache_api::servername:
              str_replace:
                template:
                  "%{hiera('fqdn_$NETWORK')}"
                params:
                  $NETWORK: {get_param: [ServiceNetMap, NovaApiNetwork]}
            nova::api::instance_name_template: {get_param: InstanceNameTemplate}
            nova_enable_db_purge: {get_param: NovaEnableDBPurge}
            nova_enable_db_archive: {get_param: NovaEnableDBArchive}
            nova::policy::policies: {get_param: NovaApiPolicies}
            nova::api::allow_resize_to_same_host: {get_param: NovaAllowResizeToSameHost}
          -
            if:
            - nova_workers_zero
            - {}
            - nova::api::osapi_compute_workers: {get_param: NovaWorkers}
              nova::wsgi::apache_api::workers: {get_param: NovaWorkers}
          -
            if:
            - is_neutron_shared_metadata_notempty
            - nova::api::neutron_metadata_proxy_shared_secret: {get_param: NeutronMetadataProxySharedSecret}
            - {}

      service_config_settings:
        rabbitmq: {get_attr: [NovaBase, role_data, service_config_settings], rabbitmq}
        mysql:
          map_merge:
            - get_attr: [NovaApiDBClient, role_data, service_config_settings, mysql]
            - get_attr: [NovaDBClient, role_data, service_config_settings, mysql]
        rsyslog:
          tripleo_logging_sources_nova_api:
            - {get_param: NovaApiLoggingSource}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: nova
        puppet_tags: nova_config
        step_config:
          list_join:
            - "\n"
            - - "['Nova_cell_v2'].each |String $val| { noop_resource($val) }"
              - include tripleo::profile::base::nova::api
              - {get_attr: [MySQLClient, role_data, step_config]}
        config_image: {get_param: ContainerNovaConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/nova_api.json:
          command: /usr/sbin/httpd -DFOREGROUND
          config_files: &nova_api_db_sync
            - source: "/var/lib/kolla/config_files/src/etc/httpd/conf.d"
              dest: "/etc/httpd/conf.d"
              merge: false
              preserve_properties: true
            - source: "/var/lib/kolla/config_files/src/etc/httpd/conf.modules.d"
              dest: "/etc/httpd/conf.modules.d"
              # TODO(emilien) remove optional flag once we get a promotion
              # https://launchpad.net/bugs/1884115
              optional: true
              merge: false
              preserve_properties: true
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions: &nova_api_permissions
            - path: /var/log/nova
              owner: nova:nova
              recurse: true
        /var/lib/kolla/config_files/nova_api_db_sync.json:
          command: "/usr/bin/bootstrap_host_exec nova_api su nova -s /bin/bash -c '/usr/bin/nova-manage api_db sync'"
          config_files: *nova_api_db_sync
          permissions: *nova_api_permissions
        /var/lib/kolla/config_files/nova_api_ensure_default_cells.json:
          command: "/usr/bin/bootstrap_host_exec nova_api /nova_api_ensure_default_cells.sh"
          config_files: *nova_api_db_sync
          permissions: *nova_api_permissions
        /var/lib/kolla/config_files/nova_api_cron.json:
          command: /usr/sbin/crond -n
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions: *nova_api_permissions
        /var/lib/kolla/config_files/nova_wait_for_api_service.json:
          command: "/usr/bin/bootstrap_host_exec nova_api su nova -s /bin/bash -c '/container-config-scripts/pyshim.sh /container-config-scripts/nova_wait_for_api_service.py'"
          config_files: *nova_api_db_sync
          permissions: *nova_api_permissions

      container_config_scripts:
        map_merge:
          - {get_attr: [ContainersCommon, container_config_scripts]}
          - nova_ffu_db_sync.sh:
              mode: "0755"
              content: { get_file: ../../container_config_scripts/nova_ffu_db_sync.sh }
          - nova_wait_for_api_service.py:
              mode: "0755"
              content: { get_file: ../../container_config_scripts/nova_wait_for_api_service.py }
            nova_api_ensure_default_cells.sh:
              mode: "0700"
              content:
                str_replace:
                  template: |
                    #!/bin/bash
                    set -e
                    CELL0_ID='00000000-0000-0000-0000-000000000000'
                    CELL0_EXISTS=$(su nova -s /bin/bash -c "nova-manage cell_v2 list_cells" | sed -e '1,3d' -e '$d' | awk -F ' *| *' '$4 == "'$CELL0_ID'" {print $4}')
                    if [ "$CELL0_EXISTS" ]; then
                      echo "(cellv2) Updating cell_v2 cell0 database uri"
                      su nova -s /bin/bash -c "/usr/bin/nova-manage cell_v2 update_cell --cell_uuid $CELL0_ID --database_connection='CELL0DB' --transport-url='none:///'"
                    else
                      echo "(cellv2) Creating cell_v2 cell0"
                      su nova -s /bin/bash -c "/usr/bin/nova-manage cell_v2 map_cell0 --database_connection='CELL0DB'"
                    fi
                    DEFID=$(su nova -s /bin/bash -c "nova-manage cell_v2 list_cells" | sed -e '1,3d' -e '$d' | awk -F ' *| *' '$2 == "default" {print $4}')
                    if [ "$DEFID" ]; then
                      echo "(cellv2) Updating default cell_v2 cell $DEFID"
                      su nova -s /bin/bash -c "/usr/bin/nova-manage cell_v2 update_cell --cell_uuid $DEFID --name=default --database_connection='CELLDB' --transport-url='TRANSPORTURL'"
                    else
                      echo "(cellv2) Creating default cell_v2 cell"
                      su nova -s /bin/bash -c "/usr/bin/nova-manage cell_v2 create_cell --name=default --database_connection='CELLDB' --transport-url='TRANSPORTURL'"
                    fi
                  params:
                    CELL0DB:
                      list_join:
                      - ''
                      - - '{scheme}'
                        - '://'
                        - '{username}'
                        - ':'
                        - '{password}'
                        - '@'
                        - if:
                            - mysql_ipv6_use_ip_address
                            - '[{hostname}]'
                            - '{hostname}'
                        - '/'
                        - 'nova_cell0'
                        - '?'
                        - '{query}'
                    CELLDB:
                      list_join:
                      - ''
                      - - '{scheme}'
                        - '://'
                        - '{username}'
                        - ':'
                        - '{password}'
                        - '@'
                        -
                          if:
                            - mysql_ipv6_use_ip_address
                            - '[{hostname}]'
                            - '{hostname}'
                        - '/'
                        - 'nova'
                        - '?'
                        - '{query}'
                    TRANSPORTURL:
                      list_join:
                      - ''
                      - - '{scheme}'
                        - '://'
                        - '{username}'
                        - ':'
                        - '{password}'
                        - '@'
                        - '{hostname}'
                        - ':'
                        - '{port}'
                        - '/'
                        - '?'
                        - '{query}'
      docker_config:
        step_2:
          get_attr: [NovaApiLogging, docker_config, step_2]
        step_3:
          map_merge:
            - nova_api_db_sync:
                start_order: 3 # Runs before nova-conductor dbsync
                image: &nova_api_image {get_param: ContainerNovaApiImage}
                net: host
                detach: false
                user: root
                volumes: &nova_api_bootstrap_volumes
                  list_concat:
                    - {get_attr: [ContainersCommon, volumes]}
                    - {get_attr: [NovaApiLogging, volumes]}
                    - - /var/lib/kolla/config_files/nova_api_db_sync.json:/var/lib/kolla/config_files/config.json:ro
                      - /var/lib/config-data/puppet-generated/nova:/var/lib/kolla/config_files/src:ro
                environment:
                  KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
                  TRIPLEO_DEPLOY_IDENTIFIER: {get_param: DeployIdentifier}
              nova_api_ensure_default_cells:
                start_order: 5 # Runs before nova-conductor dbsync
                image: *nova_api_image
                net: host
                detach: false
                volumes:
                  list_concat:
                    - {get_attr: [ContainersCommon, volumes]}
                    - {get_attr: [NovaApiLogging, volumes]}
                    - - /var/lib/kolla/config_files/nova_api_ensure_default_cells.json:/var/lib/kolla/config_files/config.json:ro
                      - /var/lib/config-data/puppet-generated/nova:/var/lib/kolla/config_files/src:ro
                      - /var/lib/container-config-scripts/nova_api_ensure_default_cells.sh:/nova_api_ensure_default_cells.sh:ro
                user: root
                environment:
                  KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
            - if:
                - fast_forward_upgrade
                - nova_api_db_sync_stein:
                    start_order: 0 # Runs before nova-conductor dbsync Stein
                    image: &nova_api_image_stein {get_param: ContainerNovaApiImageStein}
                    net: host
                    detach: false
                    user: root
                    volumes:
                      list_concat:
                        - {get_attr: [ContainersCommon, volumes]}
                        - {get_attr: [NovaApiLogging, volumes]}
                        -
                          - /var/lib/config-data/nova/etc/my.cnf.d/tripleo.cnf:/etc/my.cnf.d/tripleo.cnf:ro
                          - /var/lib/config-data/nova/etc/nova/:/etc/nova/:ro
                          - /var/lib/container-config-scripts/:/container-config-scripts/:ro
                    command:
                      - '/usr/bin/bootstrap_host_exec'
                      - 'nova_api'
                      - '/container-config-scripts/nova_ffu_db_sync.sh'
                      - 'api_db'
                    environment:
                      TRIPLEO_DEPLOY_IDENTIFIER: {get_param: DeployIdentifier}
                - {}
        step_4:
          nova_api:
            start_order: 2
            image: *nova_api_image
            net: host
            user: root
            privileged: false
            restart: always
            healthcheck:
              test: /openstack/healthcheck
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                - {get_attr: [NovaApiLogging, volumes]}
                -
                  - /var/lib/kolla/config_files/nova_api.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/nova:/var/lib/kolla/config_files/src:ro
                - if:
                    - internal_tls_enabled
                    - - /etc/pki/tls/certs/httpd:/etc/pki/tls/certs/httpd:ro
                    - []
                - if:
                    - internal_tls_enabled
                    - - /etc/pki/tls/private/httpd:/etc/pki/tls/private/httpd:ro
                    - []
            environment:
              KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
          nova_wait_for_api_service:
            start_order: 3
            image: *nova_api_image
            user: root
            net: host
            privileged: false
            detach: false
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                - {get_attr: [NovaApiLogging, volumes]}
                - - /var/lib/kolla/config_files/nova_wait_for_api_service.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/nova:/var/lib/kolla/config_files/src:ro
                  - /var/lib/container-config-scripts/:/container-config-scripts/:z
            environment:
              __OS_DEBUG:
                yaql:
                  expression: str($.data.debug)
                  data:
                    debug: {get_attr: [NovaBase, role_data, config_settings, 'nova::logging::debug']}
              KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
          nova_api_cron:
            start_order: 4
            image: *nova_api_image
            net: host
            user: root
            privileged: false
            restart: always
            healthcheck:
              test: '/usr/share/openstack-tripleo-common/healthcheck/cron nova'
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                - {get_attr: [NovaApiLogging, volumes]}
                -
                  - /var/lib/kolla/config_files/nova_api_cron.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/nova:/var/lib/kolla/config_files/src:ro
            environment:
              KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
      metadata_settings:
        get_attr: [ApacheServiceBase, role_data, metadata_settings]
      deploy_steps_tasks:
        - name: validate nova api container state
          when:
            - not (ansible_check_mode | bool)
            - container_cli == 'podman'
            - not container_healthcheck_disabled
            - step|int == 5
          tags:
            - opendev-validation
            - opendev-validation-nova
          block:
            - name: Get nova-api healthcheck status
              register: nova_api_healthcheck_state
              systemd:
                name: tripleo_nova_api_healthcheck
              retries: 10
              delay: 30
              until: nova_api_healthcheck_state.status.ExecMainPID != '0' and
                nova_api_healthcheck_state.status.ActiveState in ['inactive', 'failed']
              failed_when: false
            - name: Fail if nova-api healthcheck report failed status
              fail:
                msg: nova-api isn't working (healthcheck failed)
              when: nova_api_healthcheck_state.status.ExecMainStatus != '0'
      host_prep_tasks: {get_attr: [NovaApiLogging, host_prep_tasks]}
      external_upgrade_tasks:
        - when:
            - step|int == 1
          tags:
            - never
            - system_upgrade_transfer_data
            - system_upgrade_stop_services
          block:
            - name: Stop nova api container
              import_role:
                name: tripleo-container-stop
              vars:
                tripleo_containers_to_stop:
                  - nova_api
                  - nova_placement
                  - nova_api_cron
                tripleo_delegate_to: "{{ groups['nova_api'] | difference(groups['excluded_overcloud']) }}"
