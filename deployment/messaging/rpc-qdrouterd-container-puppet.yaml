heat_template_version: wallaby

description: >
  OpenStack containerized Qpid dispatch router service

parameters:
  ContainerQdrouterdImage:
    description: image
    type: string
  ContainerQdrouterdConfigImage:
    description: The container image to use for the qdrouterd config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  RpcPort:
    default: 5672
    description: The network port for messaging backend
    type: number
  RpcUserName:
    default: guest
    description: The username for messaging backend
    type: string
  RpcPassword:
    description: The password for messaging backend
    type: string
    hidden: true
  RpcUseSSL:
    default: false
    description: >
        Messaging client subscriber parameter to specify
        an SSL connection to the messaging host.
    type: string

resources:

  ContainersCommon:
    type: ../containers-common.yaml

outputs:
  role_data:
    description: Role data for the qdrouterd service.
    value:
      service_name: oslo_messaging_rpc
      firewall_rules:
        '109 qdrouterd':
          dport:
            - {get_param: RpcPort}
            - 31459
            - 31460
        '109 qdr':
          dport:
            - {get_param: RpcPort}
      global_config_settings:
        oslo_messaging_rpc_scheme: amqp
        oslo_messaging_rpc_user_name: {get_param: RpcUserName}
        oslo_messaging_rpc_password: {get_param: RpcPassword}
        oslo_messaging_rpc_use_ssl: {get_param: RpcUseSSL}
        oslo_messaging_rpc_port: {get_param: RpcPort}
        messaging_notify_service_name: 'amqp'
        messaging_rpc_service_name: 'amqp'
        keystone::messaging::amqp::amqp_pre_settled: 'notify'
      config_settings:
        qdr::listener_addr:
          str_replace:
            template:
              "%{hiera('$NETWORK')}"
            params:
              $NETWORK: {get_param: [ServiceNetMap, OsloMessagingRpcNetwork]}
        tripleo::profile::base::qdr::qdr_listener_port: {get_param: RpcPort}
        tripleo::profile::base::qdr::qdr_username: {get_param: RpcUserName}
        tripleo::profile::base::qdr::qdr_password: {get_param: RpcPassword}
      service_config_settings: {}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: qdrouterd
        step_config: |
          include tripleo::profile::base::qdr
        config_image: {get_param: ContainerQdrouterdConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/qdrouterd.json:
          command: /usr/sbin/qdrouterd -c /etc/qpid-dispatch/qdrouterd.conf
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/lib/qdrouterd
              owner: qdrouterd:qdrouterd
              recurse: true
      docker_config:
        step_1:
          qdrouterd_init_logs:
            start_order: 0
            detach: false
            image: &qdrouterd_image {get_param: ContainerQdrouterdImage}
            net: none
            privileged: false
            user: root
            volumes:
              - /var/log/containers/qdrouterd:/var/log/qdrouterd:z
            command: ['/bin/bash', '-c', 'chown -R qdrouterd:qdrouterd /var/log/qdrouterd']
          qdrouterd:
            start_order: 1
            stop_grace_period: 60
            image: *qdrouterd_image
            net: host
            user: qdrouterd
            privileged: false
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/qdrouterd.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/qdrouterd:/var/lib/kolla/config_files/src:ro
                  - /var/lib/qdrouterd:/var/lib/qdrouterd:z
                  - /var/log/containers/qdrouterd:/var/log/qdrouterd:z
            environment:
              KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
      host_prep_tasks:
      - name: create fcontext entry for qdrouterd data
        community.general.sefcontext:
          target: "/var/lib/qdrouterd(/.*)?"
          setype: container_file_t
          state: present
      - name: create persistent logs directory
        file:
          path: "{{ item.path }}"
          state: directory
          setype: "{{ item.setype }}"
          mode: "{{ item.mode|default(omit) }}"
        with_items:
          - { 'path': /var/log/containers/qdrouterd, 'setype': container_file_t, 'mode': '0750' }
          - { 'path': /var/lib/qdrouterd, 'setype': container_file_t }
      metadata_settings: {}
