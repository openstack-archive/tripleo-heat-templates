heat_template_version: rocky

description: >
  OpenStack containerized OVN Metadata agent

parameters:
  ContainerOvnMetadataImage:
    description: image
    type: string
  ContainerNeutronConfigImage:
    description: The container image to use for the neutron config_volume
    type: string
  OvnMetadataAgentLoggingSource:
    type: json
    default:
      tag: openstack.neutron.agent.ovn-metadata
      file: /var/log/containers/neutron/networking-ovn-metadata-agent.log
  OVNEnableHaproxyDockerWrapper:
    description: Generate a wrapper script so that haproxy is launched in a separate container.
    type: boolean
    default: true
  Debug:
    type: boolean
    default: false
    description: Set to True to enable debugging on all services.
  OVNWrapperDebug:
    type: boolean
    default: false
    description: Controls debugging for the wrapper scripts.
  ContainerCli:
    type: string
    default: 'podman'
    description: CLI tool used to manage containers.
    constraints:
      - allowed_values: ['docker', 'podman']
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  NeutronMetadataProxySharedSecret:
    description: Shared secret to prevent spoofing
    type: string
    hidden: true
  NeutronMetadataWorkers:
    default: ''
    description: |
      Sets the number of worker processes for the neutron OVN metadata agent.
      The default value results in the configuration being left unset and a
      system-dependent default will be chosen (usually the number of
      processors). Please note that this can result in a large number of
      processes and memory consumption on systems with a large core count. On
      such systems it is recommended that a non-default value be selected that
      matches the load requirements.
    type: string
  NeutronPassword:
    description: The password for the neutron service and db account, used by neutron agents.
    type: string
    hidden: true
  OVNSouthboundServerPort:
    description: Port of the OVN Southbound DB server
    type: number
    default: 6642
  OVNDbConnectionTimeout:
    description: Timeout in seconds for the OVSDB connection transaction
    type: number
    default: 180
  OVNOvsdbProbeInterval:
    description: Probe interval in ms for the OVSDB session
    type: number
    default: 60000
  MonitoringSubscriptionOvnMetadata:
    default: 'overcloud-ovn-metadata'
    type: string
  Debug:
    type: boolean
    default: false
    description: Set to True to enable debugging on all services.
  OvnMetadataAgentDebug:
    default: ''
    description: Set to True to enable debugging for OVN Metadata agent.
    type: string
    constraints:
      - allowed_values: [ '', 'true', 'True', 'TRUE', 'false', 'False', 'FALSE']
  EnableInternalTLS:
    type: boolean
    default: false
  InternalTLSCAFile:
    default: '/etc/ipa/ca.crt'
    type: string
    description: Specifies the default CA cert to use if TLS is used for
                 services in the internal network.
  DockerAdditionalSockets:
    default: ['/var/lib/openstack/docker.sock']
    description: Additional domain sockets for the docker daemon to bind to (useful for mounting
                 into containers that launch other containers)
    type: comma_delimited_list
  CertificateKeySize:
    type: string
    default: '2048'
    description: Specifies the private key size used when creating the
                 certificate.
  OvnMetadataCertificateKeySize:
    type: string
    default: ''
    description: Override the private key size used when creating the
                 certificate for this service

conditions:
  haproxy_wrapper_enabled: {equals: [{get_param: OVNEnableHaproxyDockerWrapper}, true]}
  docker_enabled: {equals: [{get_param: ContainerCli}, 'docker']}
  service_debug_unset: {equals : [{get_param: OVNWrapperDebug}, false]}
  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}
  neutron_metadata_workers_unset: {equals : [{get_param: NeutronMetadataWorkers}, '']}
  key_size_override_unset: {equals: [{get_param: OvnMetadataCertificateKeySize}, '']}

resources:

  ContainersCommon:
    type: ../containers-common.yaml

  NeutronBase:
    type: ../neutron/neutron-base.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

  NeutronLogging:
    type: OS::TripleO::Services::Logging::NeutronCommon
    properties:
      NeutronServiceName: ovn-metadata-agent

outputs:
  role_data:
    description: Role data for OVNMetadata agent
    value:
      service_name: ovn_metadata
      monitoring_subscription: {get_param: MonitoringSubscriptionOvnMetadata}
      config_settings:
        map_merge:
          - get_attr: [NeutronBase, role_data, config_settings]
          - get_attr: [NeutronLogging, config_settings]
          - tripleo::profile::base::neutron::ovn_metadata_agent_wrappers::enable_haproxy_wrapper: {get_param: OVNEnableHaproxyDockerWrapper}
            tripleo::profile::base::neutron::ovn_metadata_agent_wrappers::haproxy_process_wrapper: '/var/lib/neutron/ovn_metadata_haproxy_wrapper'
            tripleo::profile::base::neutron::ovn_metadata_agent_wrappers::haproxy_image: {get_param: ContainerOvnMetadataImage}
            tripleo::profile::base::neutron::ovn_metadata_agent_wrappers::debug:
              if:
                - service_debug_unset
                - {get_param: Debug }
                - {get_param: OVNWrapperDebug}
            tripleo::profile::base::neutron::container_cli: {get_param: ContainerCli}
            neutron::agents::ovn_metadata::shared_secret: {get_param: NeutronMetadataProxySharedSecret}
            neutron::agents::ovn_metadata::auth_password: {get_param: NeutronPassword}
            neutron::agents::ovn_metadata::auth_url: { get_param: [EndpointMap, KeystoneInternal, uri_no_suffix] }
            neutron::agents::ovn_metadata::auth_tenant: 'service'
            neutron::agents::ovn_metadata::metadata_host: {get_param: [EndpointMap, NovaMetadataCellInternal, host_nobrackets]}
            neutron::agents::ovn_metadata::ovsdb_connection_timeout: {get_param: OVNDbConnectionTimeout}
            neutron::agents::ovn_metadata::ovsdb_probe_interval: {get_param: OVNOvsdbProbeInterval}
            ovn::southbound::port: {get_param: OVNSouthboundServerPort}
            neutron::agents::ovn_metadata::debug:
                if:
                - service_debug_unset
                - {get_param: Debug}
                - {get_param: OvnMetadataAgentDebug}
            neutron::agents::ovn_metadata::metadata_protocol:
              if:
              - internal_tls_enabled
              - 'https'
              - 'http'
          -
            if:
            - neutron_metadata_workers_unset
            - {}
            - neutron::agents::ovn_metadata::metadata_workers: {get_param: NeutronMetadataWorkers}
          - if:
            - internal_tls_enabled
            - tripleo::profile::base::neutron::ovn_metadata::ovn_sb_ca_cert: {get_param: InternalTLSCAFile}
              tripleo::profile::base::neutron::ovn_metadata::protocol: 'ssl'
              tripleo::profile::base::neutron::ovn_metadata::ovn_sb_certificate: '/etc/pki/tls/certs/ovn_metadata.crt'
              tripleo::profile::base::neutron::ovn_metadata::ovn_sb_private_key: '/etc/pki/tls/private/ovn_metadata.key'
              generate_service_certificates: true
              ovn_metadata_certificate_specs:
                service_certificate: '/etc/pki/tls/certs/ovn_metadata.crt'
                service_key: '/etc/pki/tls/private/ovn_metadata.key'
                hostname:
                  str_replace:
                    template: "%{hiera('fqdn_NETWORK')}"
                    params:
                      NETWORK: {get_param: [ServiceNetMap, OvnDbsNetwork]}
                principal:
                  str_replace:
                    template: "ovn_metadata/%{hiera('fqdn_NETWORK')}@%{hiera('certmonger_krb_realm')}"
                    params:
                      NETWORK: {get_param: [ServiceNetMap, OvnDbsNetwork]}
                key_size:
                  if:
                    - key_size_override_unset
                    - {get_param: CertificateKeySize}
                    - {get_param: OvnMetadataCertificateKeySize}
            - {}

      puppet_config:
        puppet_tags: neutron_config,ovn_metadata_agent_config
        config_volume: neutron
        step_config: |
          include tripleo::profile::base::neutron::ovn_metadata
        config_image: {get_param: ContainerNeutronConfigImage}
        volumes:
          - /lib/modules:/lib/modules:ro
          - /run/openvswitch:/run/openvswitch:shared,z
      kolla_config:
        /var/lib/kolla/config_files/ovn_metadata_agent.json:
          command:
            list_join:
            - ' '
            - - /usr/bin/networking-ovn-metadata-agent --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/networking-ovn/networking-ovn-metadata-agent.ini --config-dir /etc/neutron/conf.d/networking-ovn-metadata-agent
              - get_attr: [NeutronLogging, cmd_extra_args]
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/neutron
              owner: neutron:neutron
              recurse: true
            - path: /var/lib/neutron
              owner: neutron:neutron
              recurse: true
            - path: /etc/pki/tls/certs/ovn_metadata.crt
              owner: neutron:neutron
              optional: true
              perm: '0644'
            - path: /etc/pki/tls/private/ovn_metadata.key
              owner: neutron:neutron
              optional: true
              perm: '0644'
      container_config_scripts: {get_attr: [ContainersCommon, container_config_scripts]}
      docker_config:
        step_2:
          create_haproxy_wrapper:
            start_order: 1
            detach: false
            net: host
            pid: host
            user: root
            command: # '/container_puppet_apply.sh "STEP" "TAGS" "CONFIG" "DEBUG"'
              list_concat:
                -
                  - '/container_puppet_apply.sh'
                  - '4'
                  - 'file'
                  - 'include ::tripleo::profile::base::neutron::ovn_metadata_agent_wrappers'
            image: {get_param: ContainerOvnMetadataImage}
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, container_puppet_apply_volumes]}
                -
                  - /run/openvswitch:/run/openvswitch:shared,z
                  - /var/lib/neutron:/var/lib/neutron:shared,z
        step_4:
          setup_ovs_manager:
            start_order: 0
            detach: false
            net: host
            privileged: true
            user: root
            command: # '/container_puppet_apply.sh "STEP" "TAGS" "CONFIG" "DEBUG"'
              list_concat:
                - - '/container_puppet_apply.sh'
                  - '4'
                  - 'exec'
                  - 'include ::tripleo::profile::base::neutron::ovn_metadata'
            image: {get_param: ContainerOvnMetadataImage}
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, container_puppet_apply_volumes]}
                - - /lib/modules:/lib/modules:ro
                  - /run/openvswitch:/run/openvswitch:shared,z
          ovn_metadata_agent:
            start_order: 1
            image: {get_param: ContainerOvnMetadataImage}
            net: host
            pid: host
            privileged: true
            restart: always
            healthcheck:
              test: /openstack/healthcheck
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                - {get_attr: [NeutronLogging, volumes]}
                -
                  - /var/lib/kolla/config_files/ovn_metadata_agent.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/neutron:/var/lib/kolla/config_files/src:ro
                  - /lib/modules:/lib/modules:ro
                  - /run/openvswitch:/run/openvswitch:shared,z
                  - /var/lib/neutron:/var/lib/neutron:shared,z
                  - /run/netns:/run/netns:shared
                  - /var/lib/neutron/kill_scripts:/etc/neutron/kill_scripts:shared,z
                -
                  if:
                    - docker_enabled
                    - - /var/lib/openstack:/var/lib/openstack
                    - null
                -
                  if:
                    - haproxy_wrapper_enabled
                    - - /var/lib/neutron/ovn_metadata_haproxy_wrapper:/usr/local/bin/haproxy:ro
                    - null
                - if:
                  - internal_tls_enabled
                  -
                    - /etc/pki/tls/certs/ovn_metadata.crt:/etc/pki/tls/certs/ovn_metadata.crt
                    - /etc/pki/tls/private/ovn_metadata.key:/etc/pki/tls/private/ovn_metadata.key
                  - null
            environment:
              KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
      metadata_settings:
        list_concat:
          - {get_attr: [NeutronBase, role_data, metadata_settings]}
          - if:
            - internal_tls_enabled
            - - service: ovn_metadata
                network: {get_param: [ServiceNetMap, OvnDbsNetwork]}
                type: node
            - null
      host_prep_tasks:
        list_concat:
          - {get_attr: [NeutronLogging, host_prep_tasks]}
          - - name: create /run/netns with temp namespace
              command: ip netns add ns_temp
              register: ipnetns_add_result
              failed_when: false
            - name: remove temp namespace
              command: ip netns delete ns_temp
              failed_when: false
              when:
                - ipnetns_add_result.rc is defined
                - ipnetns_add_result.rc == 0
            - name: create /var/lib/neutron
              file:
                path: /var/lib/neutron
                state: directory
                setype: svirt_sandbox_file_t
            - name: set conditions
              set_fact:
                haproxy_wrapper_enabled: {get_param: OVNEnableHaproxyDockerWrapper}
                debug_enabled:
                  if:
                    - service_debug_unset
                    - {get_param: Debug }
                    - {get_param: NeutronWrapperDebug}
                docker_additional_sockets: {get_param: DockerAdditionalSockets}
            - name: create kill_scripts directory within /var/lib/neutron
              file:
                state: directory
                path: /var/lib/neutron/kill_scripts
            - name: create haproxy kill script
              when: haproxy_wrapper_enabled|bool
              copy:
                dest: /var/lib/neutron/kill_scripts/haproxy-kill
                mode: 0755
                content: {get_file: ../neutron/kill-script}
      upgrade_tasks:
        - name: Gather missing facts
          setup:
            gather_subset: "distribution"
          when: >-
            ansible_facts['distribution'] is not defined or
            ansible_facts['distribution_major_version'] is not defined
          tags:
            - never
            - nova_hybrid_state
        - name: Switch ovn remote setting
          vars:
            enable_internal_tls: {get_param: EnableInternalTLS}
            internal_tls_ca: {get_param: InternalTLSCAFile}
            ovn_cert_network: {get_param: [ServiceNetMap, OvnDbsNetwork]}
            ovn_cert_key_size:
              if:
                - key_size_override_unset
                - {get_param: CertificateKeySize}
                - {get_param: ContainerOvnCertificateKeySize}
          tags:
            - never
            - nova_hybrid_state
          when:
            - step|int == 0
            - ansible_facts['distribution'] == 'RedHat'
            - ansible_facts['distribution_major_version'] is version('7', '==')
          block:
            - name: SSL setup into semi hybrid state
              when: enable_internal_tls|bool
              block:
                - name: Get certificate for ovn_metadata
                  shell: |
                    set -o pipefail
                    /usr/bin/getcert list -i ovn_metadata || \
                    /usr/bin/getcert request -I ovn_metadata \
                    -f /etc/pki/tls/certs/ovn_metadata.crt \
                    -c IPA \
                    -N CN=$( hiera -c /etc/puppet/hiera.yaml fqdn_{{ovn_cert_network}} ) \
                    -K ovn_metadata/$( hiera -c /etc/puppet/hiera.yaml fqdn_{{ovn_cert_network}} ) \
                    -D $( hiera -c /etc/puppet/hiera.yaml fqdn_{{ovn_cert_network}} ) \
                    -g {{ovn_cert_key_size}} \
                    -w -k /etc/pki/tls/private/ovn_metadata.key
                - name: Get GID of container neutron user on host by checking neutron.conf
                  stat: 
                    path: /var/lib/config-data/puppet-generated/neutron/etc/neutron/neutron.conf
                  register: stat_neutron_conf
                - name: Copy the certificate temporarly for hybrid state into ovn metadata agent container neutron dir
                  copy:
                    src: /etc/pki/tls/certs/ovn_metadata.crt
                    dest: /var/lib/config-data/puppet-generated/neutron/etc/neutron/ovn_metadata.crt
                    mode: '0640'
                    group: "{{ stat_neutron_conf.stat.gid }}"
                    remote_src: yes
                - name: Copy the key temporarly for hybrid state into ovn metadata agent container neutron dir
                  copy:
                    src: /etc/pki/tls/private/ovn_metadata.key
                    dest: /var/lib/config-data/puppet-generated/neutron/etc/neutron/ovn_metadata.key
                    mode: '0640'
                    group: "{{ stat_neutron_conf.stat.gid }}"
                    remote_src: yes
                - name: Set ovn cert setting in networking-ovn-metadata-agent.ini
                  ini_file:
                    path: /var/lib/config-data/puppet-generated/neutron/etc/neutron/plugins/networking-ovn/networking-ovn-metadata-agent.ini
                    section: ovn
                    option: ovn_sb_certificate
                    value: /etc/neutron/ovn_metadata.crt
                - name: Set ovn cert key setting in networking-ovn-metadata-agent.ini
                  ini_file:
                    path: /var/lib/config-data/puppet-generated/neutron/etc/neutron/plugins/networking-ovn/networking-ovn-metadata-agent.ini
                    section: ovn
                    option: ovn_sb_private_key
                    value: /etc/neutron/ovn_metadata.key
                - name: Set ovn cacert setting in networking-ovn-metadata-agent.ini
                  ini_file:
                    path: /var/lib/config-data/puppet-generated/neutron/etc/neutron/plugins/networking-ovn/networking-ovn-metadata-agent.ini
                    section: ovn
                    option: ovn_sb_ca_cert
                    value: "{{ internal_tls_ca }}"
            - name: Set fact - OVN SB connection string
              set_fact:
                ovn_sb_conn_str: "{{ [enable_internal_tls | bool | ternary('ssl','tcp'), ovn_dbs_vip | ipwrap, service_configs['ovn::southbound::port']] | join(':') }}"
            - name: Set new ovn remote setting in networking-ovn-metadata-agent.ini
              ini_file:
                path: /var/lib/config-data/puppet-generated/neutron/etc/neutron/plugins/networking-ovn/networking-ovn-metadata-agent.ini
                section: ovn
                option: ovn_sb_connection
                value: "{{ ovn_sb_conn_str }}"
              register: ini_read_result
            - name: Restart ovn_metadata_agent container to apply change in networking-ovn-metadata-agent.ini
              docker_container:
                name: ovn_metadata_agent
                state: started
                restart: True
                comparisons:
                  '*': ignore
              when: ini_read_result is changed
        - name: Ensure correct label recursively on ovn directory
          when:
            - step|int == 2
          file:
            path: "/var/lib/openvswitch/ovn"
            recurse: true
            setype: "svirt_sandbox_file_t"
            state: directory
