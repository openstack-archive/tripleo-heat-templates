{#- Convert net map or net list to internal list of networks #}
{#- NOTE(hjensas): For backward compatibility support role data with both #}
{#-                networks map (new schema) and network list (old schema). #}
{%- if role.networks is mapping %}
{%-     set _role_networks = [] %}
{%-     for key, val in role.networks.items() %}
{%-         set _ = _role_networks.append(key) %}
{%-     endfor %}
{%- else %}
{%-     set _role_networks = role.networks %}
{%- endif %}
heat_template_version: rocky
description: >
  Software Config to drive os-net-config with 2 Linux bonds. One bond is on a
  bridge with VLANs attached for the {{role.name}} role.
parameters:
  ControlPlaneIp:
    default: ''
    description: IP address/subnet on the ctlplane network
    type: string
  ControlPlaneSubnetCidr:
    default: ''
    description: >
      The subnet CIDR of the control plane network. (The parameter is
      automatically resolved from the ctlplane subnet's cidr attribute.)
    type: string
  ControlPlaneDefaultRoute:
    default: ''
    description: The default route of the control plane network. (The parameter
      is automatically resolved from the ctlplane subnet's gateway_ip attribute.)
    type: string
  ControlPlaneStaticRoutes:
    default: []
    description: >
      Routes for the ctlplane network traffic.
      JSON route e.g. [{'destination':'10.0.0.0/16', 'nexthop':'10.0.0.1'}]
      Unless the default is changed, the parameter is automatically resolved
      from the subnet host_routes attribute.
    type: json
  ControlPlaneMtu:
    default: 1500
    description: The maximum transmission unit (MTU) size(in bytes) that is
      guaranteed to pass through the data path of the segments in the network.
      (The parameter is automatically resolved from the ctlplane network's mtu attribute.)
    type: number
{%- for network in networks if network.enabled|default(true) and network.name in _role_networks %}

  {{network.name}}IpSubnet:
    default: ''
    description: IP address/subnet on the {{network.name_lower}} network
    type: string
  {{network.name}}NetworkVlanID:
    default: {{network.vlan|default(1)}}
    description: Vlan ID for the {{network.name_lower}} network traffic.
    type: number
  {{network.name}}Mtu:
    default: {{network.mtu|default('1500')}}
    description: The maximum transmission unit (MTU) size(in bytes) that is
      guaranteed to pass through the data path of the segments in the
      {{network.name}} network.
    type: number
{%- if role.default_route_networks is defined and network.name in role.default_route_networks %}
  {{network.name}}InterfaceDefaultRoute:
    default: ''
    description: default route for the {{network.name_lower}} network
    type: string
{%- endif %}
  {{network.name}}InterfaceRoutes:
    default: []
    description: >
      Routes for the {{network.name_lower}} network traffic.
      JSON route e.g. [{'destination':'10.0.0.0/16', 'nexthop':'10.0.0.1'}]
      Unless the default is changed, the parameter is automatically resolved
      from the subnet host_routes attribute.
    type: json
{%- endfor %}

  DnsServers: # Override this via parameter_defaults
    default: []
    description: >
      DNS servers to use for the Overcloud (2 max for some implementations).
      If not set the nameservers configured in the ctlplane subnet's
      dns_nameservers attribute will be used.
    type: comma_delimited_list
  DnsSearchDomains: # Override this via parameter_defaults
    default: []
    description: A list of DNS search domains to be added (in order) to resolv.conf.
    type: comma_delimited_list
  BondInterfaceOvsOptions:
    default: bond_mode=active-backup
    description: 'The ovs_options or bonding_options string for the bond
      interface. Set things like lacp=active and/or bond_mode=balance-slb
      for OVS bonds or like mode=4 for Linux bonds using this option.'
    type: string
{%- if role.name == 'ComputeOvsDpdk' %}
  NumDpdkInterfaceRxQueues:
    description: Number of Rx Queues required for DPDK bond or DPDK ports
    default: 1
    type: number
{%- endif %}


resources:

  MinViableMtuBondApi:
    # This resource resolves the minimum viable MTU for interfaces, bonds and
    # bridges that carry multiple VLANs. Each VLAN may have different MTU. The
    # bridge, bond or interface must have an MTU to allow the VLAN with the
    # largest MTU.
    type: OS::Heat::Value
    properties:
      type: number
      value:
        yaql:
          expression: $.data.max()
          data:
            - {get_param: ControlPlaneMtu}
{%- for network in networks if network.enabled|default(true) and network.name in _role_networks and not network.name.startswith('Tenant') %}
            - {get_param: {{network.name}}Mtu}
{%- endfor %}

  MinViableMtuBondData:
    # This resource resolves the minimum viable MTU for interfaces, bonds and
    # bridges that carry multiple VLANs. Each VLAN may have different MTU. The
    # bridge, bond or interface must have an MTU to allow the VLAN with the
    # largest MTU.
    type: OS::Heat::Value
    properties:
      type: number
      value:
        yaql:
          expression: $.data.max()
          data:
            - {get_param: ControlPlaneMtu}
{%- for network in networks if network.name.startswith('Tenant') and network.enabled|default(true) and network.name in _role_networks %}
            - {get_param: {{network.name}}Mtu}
{%- endfor %}

  OsNetConfigImpl:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template:
            get_file: ../../scripts/run-os-net-config.sh
          params:
            $network_config:
              network_config:
              - type: interface
                name: nic1
                mtu:
                  get_param: ControlPlaneMtu
                use_dhcp: false
                addresses:
                - ip_netmask:
                    list_join:
                    - /
                    - - get_param: ControlPlaneIp
                      - get_param: ControlPlaneSubnetCidr
                routes:
                  list_concat_unique:
                    - get_param: ControlPlaneStaticRoutes
{%- if role.default_route_networks is not defined or 'ControlPlane' in role.default_route_networks %}
                    - - default: true
                        next_hop:
                          get_param: ControlPlaneDefaultRoute
{%- endif %}
              - type: linux_bond
                name: bond_api
                mtu:
                  get_attr: [MinViableMtuBondApi, value]
                use_dhcp: false
                bonding_options:
                  get_param: BondInterfaceOvsOptions
                dns_servers:
                  get_param: DnsServers
                domain:
                  get_param: DnsSearchDomains
                members:
                  - type: interface
                    name: nic2
                    mtu:
                      get_attr: [MinViableMtuBondApi, value]
                    primary: true
                  - type: interface
                    name: nic3
                    mtu:
                      get_attr: [MinViableMtuBondApi, value]
{%- for network in networks if network.enabled|default(true) and network.name in _role_networks and not network.name.startswith('Tenant') %}
              - type: vlan
                device: bond_api
                mtu:
                  get_param: {{network.name}}Mtu
                vlan_id:
                  get_param: {{network.name}}NetworkVlanID
                addresses:
                - ip_netmask:
                    get_param: {{network.name}}IpSubnet
                routes:
                  list_concat_unique:
                    - get_param: {{network.name}}InterfaceRoutes
  {%- if role.default_route_networks is defined and network.name in role.default_route_networks %}
                    - - default: true
                        next_hop:
                          get_param: {{network.name}}InterfaceDefaultRoute
  {%- endif %}
{%- endfor %}
{%- if not role.name.startswith('ComputeOvsDpdk') %}
              - type: ovs_bridge
                name: bridge_name
                dns_servers:
                  get_param: DnsServers
                members:
                - type: linux_bond
                  name: bond-data
                  mtu:
                    get_attr: [MinViableMtuBondData, value]
                  bonding_options:
                    get_param: BondInterfaceOvsOptions
                  members:
                  - type: interface
                    name: nic4
                    mtu:
                      get_attr: [MinViableMtuBondData, value]
                    primary: true
                  - type: interface
                    name: nic5
                    mtu:
                      get_attr: [MinViableMtuBondData, value]
  {%- for network in networks if network.name.startswith('Tenant') and network.name in _role_networks and network.enabled|default(true) %}
                - type: vlan
                  device: bond-data
                  mtu:
                    get_param: {{network.name}}Mtu
                  vlan_id:
                    get_param: {{network.name}}NetworkVlanID
                  addresses:
                  - ip_netmask:
                      get_param: {{network.name}}IpSubnet
                  routes:
                    list_concat_unique:
                      - get_param: {{network.name}}InterfaceRoutes
  {%- if role.default_route_networks is defined and network.name in role.default_route_networks %}
                      - - default: true
                          next_hop:
                            get_param: {{network.name}}InterfaceDefaultRoute
  {%- endif %}
  {%- endfor %}
{%- else %}
              - type: ovs_user_bridge
                name: br-dpdk0
                use_dhcp: false
  {%- for network in networks if network.name.startswith('Tenant') and network.name in _role_networks and network.enabled|default(true) %}
                ovs_extra:
                  - str_replace:
                      template: set port br-dpdk0 tag=_VLAN_TAG_
                      params:
                        _VLAN_TAG_: {get_param: {{network.name}}NetworkVlanID}
                addresses:
                  - ip_netmask: {get_param: {{network.name}}IpSubnet}
                routes:
                  list_concat_unique:
                    - get_param: {{network.name}}InterfaceRoutes
                  {%- if role.default_route_networks is defined and network.name in role.default_route_networks %}
                    - - default: true
                        next_hop:
                          get_param: {{network.name}}InterfaceDefaultRoute
                  {%- endif %}
  {%- endfor %}
                members:
                - type: ovs_dpdk_bond
                  name: dpdkbond0
                  rx_queue:
                    get_param: NumDpdkInterfaceRxQueues
                  members:
                  - type: ovs_dpdk_port
                    name: dpdk0
                    members:
                    - type: interface
                      name: nic4
                  - type: ovs_dpdk_port
                    name: dpdk1
                    members:
                    - type: interface
                      name: nic5
{%- endif %}
outputs:
  OS::stack_id:
    description: The OsNetConfigImpl resource.
    value:
      get_resource: OsNetConfigImpl

