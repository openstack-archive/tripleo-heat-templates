{#- Convert net map or net list to internal list of networks #}
{#- NOTE(hjensas): For backward compatibility support role data with both #}
{#-                networks map (new schema) and network list (old schema). #}
{%- if role.networks is mapping %}
{%-     set _role_networks = [] %}
{%-     for key, val in role.networks.items() %}
{%-         set _ = _role_networks.append(key) %}
{%-     endfor %}
{%- else %}
{%-     set _role_networks = role.networks %}
{%- endif %}
heat_template_version: rocky
description: >
  Software Config to drive os-net-config to configure VLANs for the {{role.name}} role.
parameters:
  ControlPlaneIp:
    default: ''
    description: IP address/subnet on the ctlplane network
    type: string
  ControlPlaneSubnetCidr:
    default: ''
    description: >
      The subnet CIDR of the control plane network. (The parameter is
      automatically resolved from the ctlplane subnet's cidr attribute.)
    type: string
  ControlPlaneDefaultRoute:
    default: ''
    description: The default route of the control plane network. (The parameter
      is automatically resolved from the ctlplane subnet's gateway_ip attribute.)
    type: string
  ControlPlaneStaticRoutes:
    default: []
    description: >
      Routes for the ctlplane network traffic.
      JSON route e.g. [{'destination':'10.0.0.0/16', 'nexthop':'10.0.0.1'}]
      Unless the default is changed, the parameter is automatically resolved
      from the subnet host_routes attribute.
    type: json
  ControlPlaneMtu:
    default: 1500
    description: The maximum transmission unit (MTU) size(in bytes) that is
      guaranteed to pass through the data path of the segments in the network.
      (The parameter is automatically resolved from the ctlplane network's mtu attribute.)
    type: number
{% for network in networks if network.enabled|default(true) and network.name in role.networks %}
  {{network.name}}IpSubnet:
    default: ''
    description: IP address/subnet on the {{network.name_lower}} network
    type: string
  {{network.name}}NetworkVlanID:
    default: {{network.vlan|default(1)}}
    description: Vlan ID for the {{network.name_lower}} network traffic.
    type: number
  {{network.name}}Mtu:
    default: {{network.mtu|default('1500')}}
    description: The maximum transmission unit (MTU) size(in bytes) that is
      guaranteed to pass through the data path of the segments in the
      {{network.name}} network.
    type: number
{%- if role.default_route_networks is defined and network.name in role.default_route_networks %}
  {{network.name}}InterfaceDefaultRoute:
    default: ''
    description: default route for the {{network.name_lower}} network
    type: string
{%- endif %}
  {{network.name}}InterfaceRoutes:
    default: []
    description: >
      Routes for the {{network.name_lower}} network traffic.
      JSON route e.g. [{'destination':'10.0.0.0/16', 'nexthop':'10.0.0.1'}]
      Unless the default is changed, the parameter is automatically resolved
      from the subnet host_routes attribute.
    type: json
{%- endfor %}
  DnsServers: # Override this via parameter_defaults
    default: []
    description: >
      DNS servers to use for the Overcloud (2 max for some implementations).
      If not set the nameservers configured in the ctlplane subnet's
      dns_nameservers attribute will be used.
    type: comma_delimited_list
  DnsSearchDomains: # Override this via parameter_defaults
    default: []
    description: A list of DNS search domains to be added (in order) to resolv.conf.
    type: comma_delimited_list
  NeutronPhysicalBridge:
    default: 'br-ex'
    description: An OVS bridge to create for accessing external networks.
    type: string

resources:

  MinViableMtu:
    # This resource resolves the minimum viable MTU for interfaces, bonds and
    # bridges that carry multiple VLANs. Each VLAN may have different MTU. The
    # bridge, bond or interface must have an MTU to allow the VLAN with the
    # largest MTU.
    type: OS::Heat::Value
    properties:
      type: number
      value:
        yaql:
          expression: $.data.max()
          data:
            - {get_param: ControlPlaneMtu}
{%- for network in networks if network.enabled|default(true) and network.name in role.networks %}
            - {get_param: {{network.name}}Mtu}
{%- endfor %}

  OsNetConfigImpl:
    type: OS::Heat::Value
    properties:
      value:
        network_config:
        - type: ovs_bridge
{%- if 'ceph' in role.tags or 'storage' in role.tags %}
          name: br-storage
{%- else %}
          name: {get_param: NeutronPhysicalBridge}
{%- endif %}
          mtu:
            get_attr: [MinViableMtu, value]
          use_dhcp: false
          dns_servers:
            get_param: DnsServers
          domain:
            get_param: DnsSearchDomains
          addresses:
          - ip_netmask:
              list_join:
              - /
              - - get_param: ControlPlaneIp
                - get_param: ControlPlaneSubnetCidr
          routes:
            get_param: ControlPlaneStaticRoutes
          members:
          - type: interface
            name: nic1
            mtu:
              get_attr: [MinViableMtu, value]
            # force the MAC address of the bridge to this interface
            primary: true
{%- for network in networks if network.enabled|default(true) and network.name in _role_networks %}
          - type: vlan
            mtu:
              get_param: {{network.name}}Mtu
            vlan_id:
              get_param: {{network.name}}NetworkVlanID
            addresses:
            - ip_netmask:
                get_param: {{network.name}}IpSubnet
            routes:
              get_param: {{network.name}}InterfaceRoutes
{%- endfor %}
outputs:
  config:
    description: The OsNetConfigImpl resource.
    value:
      get_attr: [OsNetConfigImpl, value]
